# Use kube-dns to resolve host name within k8s.
#
# All requests must explicitly declare namespace, we need this so that
# this proxy fans out to support all services in all namespaces in the cluster.
#
# For the sake of simplicity, proxy_pass is used (i.e., caching is disabled)
#
# Here we remember DNS lookup results only for a short duration: in k8s, users
# will tear down and recreate k8s Service on a regular basis, which means that
# such Service will get a new IP upon restart.
resolver 100.64.0.10 valid=5s;
access_log on;

# External requests will come in the form of
# https://$NAMESPACE.k8s.b0nyb0y.net/$SVC_NAME/**
# where $NAMESPACE and $SVC_NAME are namespace and service in k8s, respectively
server {
    listen 80;
    server_name ~^(?<namespace>[^\.]+)\.k8s\.b0nyb0y\.net$;

    location ~ ^/(?<appname>[^/]*?)/(?<path>.*)$ {
        # retain HTTP headers from a) original requests and b) ELB
        # see http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html
        proxy_pass_header   Server;
        proxy_pass_header   X-Forwarded-For;
        proxy_pass_header   X-Forwarded-Proto;
        proxy_pass_header   X-Forwarded-Port;
        proxy_set_header    Host $http_host; # not $host
        proxy_set_header    X-Real-IP $remote_addr;

        proxy_redirect off;
        proxy_next_upstream error;

        # Any request that did not originally come in to the ELB
        # over HTTPS gets redirected.
        if ($http_x_forwarded_proto != "https") {
            rewrite ^(.*)$ https://$server_name$1 permanent;
        }

        proxy_pass http://$appname.$namespace.svc.cluster.local;

        # Add HTTP Strict Transport Security for good measure.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";
    }
}

# Server name specifically for Jenkins
# exact naming of 'server name' to make sure that all requests related to
# Jenkins will match this rule instead of regex rule
server {
    listen 80;
    server_name jenkins.k8s.b0nyb0y.net;
    ignore_invalid_headers off; #pass through headers from Jenkins which are considered invalid by Nginx server.

    location / {
        # retain HTTP headers from a) original requests and b) ELB
        # see http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html
        proxy_pass_header   Server;
        proxy_pass_header   X-Forwarded-For;
        proxy_pass_header   X-Forwarded-Proto;
        proxy_pass_header   X-Forwarded-Port;
        proxy_set_header    Host $http_host; # not $host
        proxy_set_header    X-Real-IP $remote_addr;

        # Any request that did not originally come in to the ELB
        # over HTTPS gets redirected.
        if ($http_x_forwarded_proto != "https") {
            rewrite ^(.*)$ https://$server_name$1 permanent;
        }

        proxy_pass          http://default-jenkins-jenkins.default.svc.cluster.local;
        proxy_redirect      default;

        proxy_max_temp_file_size 0;

        #this is the maximum upload size
        client_max_body_size       10m;
        client_body_buffer_size    128k;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;

        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;

        # Add HTTP Strict Transport Security for good measure.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";
    }
}
